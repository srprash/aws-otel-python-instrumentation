# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: vehicle-inventory-backend
  name: vehicle-inventory-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: vehicle-inventory-backend
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yaml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/vehicleinventoryapp-default: "true"
        io.kompose.service: vehicle-inventory-backend
    spec:
      volumes:
        - name: python-volume
          emptyDir:
            sizeLimit: 1Gi
      initContainers:
        - name: python-init-container
          image: ${REPOSITORY_PREFIX}/pythonsampleapp/adot-autoinstrumentation-python:latest
          command:
            - "/bin/sh"
            - "-c"
            - "cp -a /autoinstrumentation/. /python-instrumentation"
          volumeMounts:
            - name: python-volume
              mountPath: /python-instrumentation
      containers:
        - args:
            - sh
            - -c
            - python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python3 manage.py runserver 0.0.0.0:8001
          image: ${REPOSITORY_PREFIX}/pythonsampleapp/vehicle-inventory-service:latest
          volumeMounts:
            - name: python-volume
              mountPath: /python-instrumentation
          name: vehicle-inventory-backend
          env:
            - name: POSTGRES_DATABASE
              value: vehicle_inventory
            - name: POSTGRES_PASSWORD
              value: ${POSTGRES_PASSWORD}
            - name: POSTGRES_USER
              value: djangouser
            - name: PYTHONPATH
              value: "../python-instrumentation/opentelemetry/instrumentation/auto_instrumentation:../python-instrumentation"
            - name: OTEL_SERVICE_NAME
              value: "VehicleInventoryApp"
            - name: OTEL_SMP_ENABLED
              value: "true"
            - name: OTEL_PYTHON_DISTRO
              value: "aws_distro"
            - name: OTEL_PYTHON_CONFIGURATOR
              value: "aws_configurator"
            - name: DJANGO_SETTINGS_MODULE
              value: "VehicleInventoryApp.settings"
            - name: OTEL_AWS_SMP_EXPORTER_ENDPOINT
              value: "http://cloudwatch-agent.amazon-cloudwatch:4315"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://cloudwatch-agent.amazon-cloudwatch:4315"
            - name: OTEL_METRICS_EXPORTER
              value: "none"
            - name: OTEL_TRACES_SAMPLER
              value: "always_on"
            - name: OTEL_PROPAGATORS
              value: "tracecontext,baggage,b3,xray"
            - name: OTEL_RESOURCE_ATTRIBUTES_POD_NAME
              value: "vehicle-inventory-backend-6cdcb68db8-r8zx2  (v1:metadata.name)"
            - name: OTEL_RESOURCE_ATTRIBUTES_NODE_NAME
              value: "(v1:spec.nodeName)"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "k8s.container.name=vehicle-inventory-backend,k8s.deployment.name=vehicle-inventory-backend,k8s.namespace.name=default,k8s.node.name=$(OTEL_RESOURCE_ATTRIBUTES_NODE_NAME),k8s.pod.name=$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME),k8s.replicaset.name=vehicle-inventory-backend-6cdcb68db8,service.version=latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8001
              hostPort: 8001
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
